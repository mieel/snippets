---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ not (lookup('env', 'MOLECULE_DEBUG') | bool or molecule_yml.provisioner.log | default(false) | bool) }}"
  vars:
    certificate_path: "{{ lookup('env','MOLECULE_EPHEMERAL_DIRECTORY') }}/certificate"
    powershell_script: "{{ lookup('env','MOLECULE_EPHEMERAL_DIRECTORY') }}/powershell"
    windows_save_path: C:\Users\Administrator\Desktop
    powershell_absolute_path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
  tasks:
    - name: debug
      debug:
        var: molecule_yml.platforms
    - name: Create molecule instance(s).
      vmware_guest:
        hostname: "{{ molecule_yml.driver.hostname }}"
        username: "{{ molecule_yml.driver.username }}"
        password: "{{ molecule_yml.driver.password }}"
        validate_certs: "{{ molecule_yml.driver.validate_certs | default(false) }}"
        datacenter: "{{ molecule_yml.driver.datacenter }}"
        esxi_hostname: "{{ molecule_yml.driver.esxi_hostname }}"
        folder: "{{ molecule_yml.driver.folder }}"
        name: "{{ item.name }}"
        template: "{{ item.template }}"
        linked_clone: yes
        snapshot_src: "{{ item.snapshot_src }}"
        networks:
          - name: "{{ item.vmw_network }}"
        datastore: "{{ item.datastore }}"
        wait_for_ip_address: yes
        wait_for_customization: yes
        customization:
          hostname: "{{ item.name }}"
        state: poweredon
      register: server
      with_items: "{{ molecule_yml.platforms }}"

    - name: Populate instance config dict.
      set_fact:
        instance_conf_dict: {
          'instance': "{{ item.item.name }}",
          'address': "{{ item.instance.ipv4 }}",
          'port': "{{ molecule_yml.driver.port }}",
          'connection': "{{ molecule_yml.driver.connection }}",
          'user': "{{ molecule_yml.driver.vm_username }}",
          'password': "{{ molecule_yml.driver.vm_password }}",
          'winrm_transport': "{{ molecule_yml.driver.winrm_transport }}",
          'winrm_server_cert_validation': "{{ molecule_yml.driver.winrm_server_cert_validation }}"
        }
      with_items: "{{ server.results }}"
      register: instance_config_dict
      when: server is changed

    - name: Convert instance config dict to a list.
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server is changed

    - name: Dump instance config.
      copy:
        # NOTE(retr0h): Workaround for Ansible 2.2.
        #               https://github.com/ansible/ansible/issues/20885
        content: "{{ instance_conf | to_json | from_json | to_yaml }}"
        dest: "{{ molecule_instance_config }}"
      when: server is changed

    - name: Wait for listening on WINRM port.
      wait_for:
        host: "{{ item.instance.ipv4 }}"
        port: "{{ molecule_yml.driver.port }}"
        delay: 5
        timeout: 300
      delegate_to: localhost
      with_items: "{{ server.results }}"
